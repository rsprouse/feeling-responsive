# This action builds the CLA website and copies the files to the
# target branch when this action is invoked manually.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Build CLA website with Jekyll and copy to target branch

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: Branch to which generated site will be pushed
        type: choice
        required: true
        options:
        - gh-pages-dev
        - gh-pages-local-dev
        - gh-pages-prod

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Echo source and target branches
        run: echo "::notice Building source branch ${{ github.ref_name }} and pushing to target branch ${{ inputs.target_branch }}."
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ruby
#        uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        env:
          # The build directory is specified as the `destination` value in the config file(s).
          # The default dir is `_site`.
          ymlfile: ${{ fromJSON('{"gh-pages-dev":"_config.yml,_config_dev.yml","gh-pages-local-dev":"_config.yml,_config_local_dev.yml","gh-pages-prod":"_config.yml","gemfile-update":"_config.yml,_config_dev.yml"}')[inputs.target_branch] }}
          # Set to development env if you want to prevent minifying the output.
          JEKYLL_ENV: ${{ fromJSON('{"gh-pages-dev":"development","gh-pages-local-dev":"development","gh-pages-prod":"production"}')[inputs.target_branch] }}
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build  --config ${{ env.ymlfile }}
      - name: Copy to selected branch
        env:
          SRC_FOLDER_PATH: ${{ fromJSON('{"gh-pages-dev":"_site_dev","gh-pages-local-dev":"_site_local_dev","gh-pages-prod":"_site","gemfile-update":"_site_dev"}')[inputs.target_branch] }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          echo "git fetch"
          git fetch                         # fetch branches
          echo "git checkout target branch"
          git checkout --orphan $TARGET_BRANCH       # checkout to your branch
          echo "find . -not -name ${SRC_FOLDER_PATH} -delete"
          find . -not -name ${SRC_FOLDER_PATH} -delete
          echo "ls -al"
          ls -al
          echo "cp -av ${SRC_FOLDER_PATH}/* ."
          cp -av ${SRC_FOLDER_PATH}/* . # copy files from the source branch
          rm -rf ${SRC_FOLDER_PATH}
          echo "git add"
          git add -A
          echo "git diff-index"
          git diff-index --quiet HEAD ||  git commit -am "deploy files"  # commit to the repository (ignore if no modification)
          echo "git push"
          git push origin $TARGET_BRANCH # push to remote branch
#          files=$(find $SRC_FOLDER_PATH -type f) # get the file list
#          git add . && \
#          git commit $COMMIT_OPTIONS -m "jekyll build from Action ${GITHUB_SHA}" && \
#          git push $PUSH_OPTIONS $REMOTE_REPO $LOCAL_BRANCH:$remote_branch && \
#          echo "SHA=$( git rev-parse ${LOCAL_BRANCH} )" >> $GITHUB_OUTPUT
#          rm -fr .git
#          cd .. 
